<!--
 * Copyright (c) 2023 Robert Bosch Manufacturing Solutions GmbH
 *
 * See the AUTHORS file(s) distributed with this work for
 * additional information regarding authorship.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * SPDX-License-Identifier: MPL-2.0
 -->

<div class="js-sdk-component-container">
  <% if (addCommandBar) { %><esmf-command-bar></esmf-command-bar><% } %>
  <ng-container *ngIf="!!customTemplate && !dataSource.data.length">
    <ng-container *ngTemplateOutlet="loadCustomTemplate()"></ng-container>
  </ng-container>
  <% if (hasFilters) { %><esmf-chip-list></esmf-chip-list><% } %>
  <div [hidden]="!!customTemplate && !dataSource.data.length">
    <div data-test="table-container" class="mat-table-container">
      <table data-test="table" mat-table class="full-width-table" matSortDisableClear="true" matSort (matSortChange)="sortData()"
             [matSortActive]="columnToSort.sortColumnName" [matSortDirection]="columnToSort.sortDirection" [ngClass]="customTableClass"
             [dataSource]="dataSource" [trackBy]="trackBy" aria-label="Elements" [matSortDisabled]="dragging">

        <!-- Row shown when there is no matching data that will be provided to the wrapper table. -->
        <tr data-test="no-data-table-row" class="mat-row" *matNoDataRow>
          <td data-test="no-data-table-cell" class="mat-cell" [colSpan]="displayedColumns.length" *ngIf="!dataSource.data.length">
            <span data-test="no-data-message">{{noDataMessage || 'No data'}}</span>
          </td>
        </tr>

        <% if (addRowCheckboxes) { %>
            <ng-container matColumnDef="checkboxes" data-test="checkboxes-container">
                <th mat-header-cell *matHeaderCellDef data-test="table-header-checkbox">
                    <mat-checkbox data-test="header-checkbox" (change)="$event ? toggleSelectAll() : null" [checked]="selection.hasValue() && isAllSelected()" [indeterminate]="selection.hasValue() && !isAllSelected()"></mat-checkbox>
                </th>
                <td mat-cell *matCellDef="let row" data-test="table-cell-checkbox">
                    <mat-checkbox data-test="cell-checkbox" (click)="$event.stopPropagation()" (change)="$event ? checkboxClicked(row) : null" [checked]="selection.isSelected(row)"></mat-checkbox>
                </td>
            </ng-container>
        <% } %>

        <%= getTableColumns %>
        <%= getCustomColumns %>

        <ng-container data-test="columns-menu-button-header" matColumnDef="columnsMenu" stickyEnd>
          <th data-test="columns-menu-button-header" mat-header-cell *matHeaderCellDef>
            <button data-test="mat-table-menu-button"
                    mat-icon-button
                    [matMenuTriggerFor]="columnMenu"
                    (menuOpened)="initOpenedColumnMenuDialog()"
                    aria-label="Menu for the table"
                    class="mat-table-menu-button">
              <mat-icon data-test="mat-table-menu-icon" [matTooltip]="'tableActions.openColumnsMenu' | translate" class="material-icons">settings</mat-icon>
            </button>
          </th>
          <td data-test="columns-menu-button-cell" mat-cell *matCellDef="let row" [class.bg-transparent]="!setStickRowActions"></td>
        </ng-container>

        <tr data-test="table-header-row" mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></tr>
        <tr data-test="table-row" mat-row *matRowDef="let row; columns: displayedColumns;" [class.selected-row]="selection.isSelected(row) && highlightSelectedRow" (click)="rowClicked(row, $event)" (contextmenu)="rowClicked(row, $event)" (dblclick)="rowDblClicked(row, $event)"></tr>
      </table>

      <mat-menu data-test="column-menu" #columnMenu="matMenu" class="column-menu">
        <<%= dasherize(name) %>-column-menu #columMenuComponent (columnsChangedEvent)="setDisplayedColumns($event)"></<%= dasherize(name) %>-column-menu>
      </mat-menu>

      <% if (hasSearchBar) { %>
      <mat-menu data-test="column-menu" #configurationMenu="matMenu" class="column-menu">
        <<%= dasherize(name) %>-config-menu #configurationMenuComponent (configChangedEvent)="setConfiguration($event)"></<%= dasherize(name) %>-config-menu>
      </mat-menu>
      <% } %>

    </div>
    <mat-paginator data-test="paginator" #paginator
                   [length]="<%= remoteDataHandling %>"
                   [pageIndex]="0"
                   [pageSize]="pageSize"
                   [pageSizeOptions]="pageSizeOptions"
                   [showFirstLastButtons]="showFirstLastButtons"
                   (page)="pageChange()">
    </mat-paginator>
  </div>
</div>

<% if (hasSearchBar) { %>
    <!-- Highlighting search values -->
    <ng-template #normal let-value="value">{{ value === null ? '-' : value }}</ng-template>
    <ng-template #searchedWordExists let-value="value">
      <ng-container *ngFor="let letter of value.toString().split(''); let i = index">
        <ng-container [ngTemplateOutlet]="shouldHighlight(value, letter) ? highlight : notHighlighted"
                      [ngTemplateOutletContext]="{ $implicit: letter }"></ng-container>
      </ng-container>
    </ng-template>
    <ng-template #highlight let-letter>
      <mark [style.background-color]="highlightConfig?.color">{{ letter }}</mark>
    </ng-template>
    <ng-template #notHighlighted let-letter>{{ letter }}</ng-template>
<% } %>
