/** <%= options.generationDisclaimerText %> **/
import {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';
import {AfterViewInit, Component, Inject, ViewChild} from '@angular/core';
import {TranslateService} from '@ngx-translate/core';
import {MatCheckbox} from '@angular/material/checkbox';
import {ChangeDetectorRef} from '@angular/core';

export enum Action {
  export= 'export',
  cancel = 'cancel'
}

@Component({
    selector: '<%= dasherize(name) %>',
    templateUrl: './<%= dasherize(name) %>.component.html',
    styleUrls: ['./<%= dasherize(name) %>.component.scss']
})
export class <%= classify(name) %>Component implements AfterViewInit {
    @ViewChild('exportAllPages') exportAllPages!: MatCheckbox;
    @ViewChild('exportAllColumns') exportAllColumns!: MatCheckbox;

    action = Action;
    dialogDescription = '';
    showAllColumnsBox = true;

    constructor(
        public dialogRef: MatDialogRef<<%= classify(name) %>Component>,
        private translateService: TranslateService,
        private cdRef:ChangeDetectorRef,
        @Inject(MAT_DIALOG_DATA)
        public data: {
            <% if (options.enableRemoteDataHandling) { %>extendedCsvExporter: boolean,<% } %>
            allColumns: number;
            displayedColumns: number;
            maxExportRows: number;
        }
    ) {}

    ngAfterViewInit() {
      this.showAllColumnsBox = this.data.displayedColumns === this.data.allColumns;

      this.setDialogDescription();
      this.cdRef.detectChanges();
    }

    setDialogDescription() {
      const {maxExportRows, allColumns, displayedColumns} = this.data;
      const isExportAllPagesChecked = this.exportAllPages.checked;
      const isExportAllColumnsChecked = this.exportAllColumns?.checked;

      let translationKey = 'exportData.description.default';

      if (isExportAllPagesChecked && isExportAllColumnsChecked) {
        translationKey = 'exportData.description.caseOne';
      } else if (isExportAllPagesChecked) {
        translationKey = displayedColumns > 1 ? 'exportData.description.caseTwo.plural' : 'exportData.description.caseTwo.singular';
      } else if (!isExportAllColumnsChecked) {
        translationKey = displayedColumns > 1 ? 'exportData.description.caseThree.plural' : 'exportData.description.caseThree.singular';
      } else if (isExportAllColumnsChecked) {
        translationKey = 'exportData.description.caseFour';
      }

      this.dialogDescription = this.translateService.instant(translationKey, {maxExportRows, allColumns, displayedColumns});
    }

    exportData() {
      this.dialogRef.close({
        action: Action.export,
        exportAllPages: this.exportAllPages.checked,
        exportAllColumns: this.exportAllColumns?.checked,
      });
    }
}
