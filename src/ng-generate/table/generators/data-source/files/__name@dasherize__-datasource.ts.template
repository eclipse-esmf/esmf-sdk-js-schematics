/** <%= options.generationDisclaimerText %> **/
import { DataSource } from '@angular/cdk/collections';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { Observable, BehaviorSubject } from 'rxjs';
import {<%= options.aspectModelTypeName %>} from '<%= options.typePath %>';
<% if (!options.enableRemoteDataHandling) { %>import {TranslateService} from '@ngx-translate/core';<% } %>

/**
 * Data source for the <%= classify(name) %> view. This class should
 * encapsulate all logic for fetching and manipulating the displayed
 * data (including sorting, pagination, and filtering).
 */
export class <%= classify(name) %>DataSource extends DataSource<<%= options.aspectModelTypeName %>> {

  paginator: MatPaginator | undefined;
  sort: MatSort | undefined;

  <% if (options.enableRemoteDataHandling) { %>remoteAPI: string | undefined;<% } %>

  private _data: Array<<%= options.aspectModelTypeName %>> = new Array<<%= options.aspectModelTypeName %>>();
  private _dataSubject = new BehaviorSubject<Array< <%= options.aspectModelTypeName %>>>([]);

  constructor(<% if (!options.enableRemoteDataHandling) { %>private translateService: TranslateService<% } %>) {
    super();
  }

  /**
   * Connect this data source to the table. The table will
   * only update when the returned stream emits new items.
   * @returns A stream of the items to be rendered.
   */
  connect(): Observable<Array<<%= options.aspectModelTypeName %>>> {
    return this._dataSubject.asObservable();
  }

  get displayedData(): Array<<%= options.aspectModelTypeName %>> {
    return this._dataSubject.value;
  }

  get data(): Array<<%= options.aspectModelTypeName %>> {
    return this._data;
  }

  /**
   * Called when the table is being destroyed. Use this function, to clean up
   * any open connections or free any held resources that were set up during connect.
   */
  disconnect(): void {
    this._dataSubject.complete();
  }

  setDataSubject(data: Array<<%= options.aspectModelTypeName %>>): void {
    this._dataSubject.next(data);
  }

  setData(data: Array<<%= options.aspectModelTypeName %>>) {
    this._data = [];
    this.addData(data);
  }

  addData(data: Array<<%= options.aspectModelTypeName %>>) {
    this._data.push(...data);
    this.setDataSubject(
        <% if (!options.enableRemoteDataHandling) { %>
            this.getPagedData(this.sortData(this._data))
        <% } else { %>
            this._data
        <% } %>
    );
  }

  get length(): number {
    return this._data.length;
  }

  <% if (!options.enableRemoteDataHandling) { %>
    private getPagedData(data: Array<<%= classify(options.aspectModelTypeName) %>>): Array<<%= classify(options.aspectModelTypeName) %>> {
        if (this.paginator) {
            const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
            return data.slice(startIndex, startIndex + this.paginator.pageSize);
        } else {
            return data;
        }
    }

    sortData(data = this._data): <%= classify(options.aspectModelTypeName) %>[] {
        if (!this.sort || !this.sort.active || this.sort.direction === '') {
          return data;
        }

        return data.sort((a: <%= classify(options.aspectModelTypeName) %>, b: <%= classify(options.aspectModelTypeName) %>): number => {
          const isSortingAsc = this.sort?.direction === 'asc';
          switch (this.sort?.active.trim()) {
            <%= getSorting %>
            default: return 0;
          }
        });
    }

    private compare(a: string | number | boolean | Date | undefined, b: string | number | boolean | Date | undefined, isSortingAsc: boolean): number {
        if (a === undefined || b === undefined) {
            return (a === undefined ? -1 : 1) * (isSortingAsc ? 1 : -1);
        }

        if (typeof a === "boolean") {
            return (a === b ? 0 : a ? -1 : 1) * (isSortingAsc ? 1 : -1);
        }

        return (a < b ? -1 : 1) * (isSortingAsc ? 1 : -1);
    }
  <% } %>
}
