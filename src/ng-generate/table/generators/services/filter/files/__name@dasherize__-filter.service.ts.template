/** <%= options.generationDisclaimerText %> **/
<% if (options.enableRemoteDataHandling) { %>
    import {
        AbstractArrayNode,
        AbstractLogicalNode,
        AbstractNode,
        And,
        Ge,
        In,
        Le,
        Like,
        Limit,
        Or,
        Query,
        QueryStringifier,
        Sort
    } from 'rollun-ts-rql';
<% } %>

<% if (options.hasSearchBar || options.isDateQuickFilter) { %>import {TranslateService} from '@ngx-translate/core';<% } %>

import {AbstractControl, FormControl, ValidationErrors, ValidatorFn} from '@angular/forms';
import {Injectable<% if (options.isDateQuickFilter) { %>, Inject<% } %>} from '@angular/core';

<% if (options.isDateQuickFilter) { %>
    import { FormGroup } from '@angular/forms';
    import {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from "@angular/material/core";
    import moment from 'moment';
<% } %>

import {<%= classify(options.selectedModelTypeName) %>
<% if (!options.aspectModel.isCollectionAspect && !options.isAspectSelected) { %>
    , <%= classify(options.aspectModelTypeName) %>
<% } %>

<% if (options.isEnumQuickFilter) { %>
    , <%= getEnumProperties %>
<% } %>

} from '<%= options.typePath %>';

export enum FilterEnums {
    Date,
    Search,
    Enum,
}

export type FilterType = {
    type: FilterEnums;
    label: string;
    prop: string|null;
    filterValue?:string;
    removable?: boolean;
};

<% if (options.hasSearchBar) { %>
    export const validateInputsValidator = (pattern: string): ValidatorFn => {
        return (control: AbstractControl): ValidationErrors | null => {
            const value = control.value;
            const allowedCharacters = new RegExp(pattern);

            //allow input to be empty
            if (value?.length === 0) {
                return null;
            }

            //trigger error if input has blank space
            if (value?.indexOf(' ') === 0 || value?.endsWith(' ')) {
                return {blankSpace: true};
            }

            // no validation pattern
            if (!pattern || !pattern.length) {
                return null;
            }

            //trigger error if input does not meet the pattern criteria
            if (value?.length > 0 && !value?.match(allowedCharacters)) {
              return {invalidInput: true};
            }

            return null;
        };
}

    export const validateInputLength = (minNoCharacters: number, maxNoCharacters: number): ValidatorFn => {
        return (control: AbstractControl): ValidationErrors | null => {
            const value = control.value;

            // no validation required
            if (!minNoCharacters && !maxNoCharacters) {
              return null;
            }

            //allow input to be empty
            if (value?.length === 0) {
              return null;
            }

            //trigger error if input has less characters than minNoCharacters
            if (minNoCharacters && value?.length < minNoCharacters) {
              return {minCharNo: true};
            }

            //trigger error if input has more characters than maxNoCharacters
            if (maxNoCharacters && value?.length > maxNoCharacters) {
              return {maxCharNo: true};
            }

            return null;
        };
}
<% } %>

/**
 * Custom service used for table filtering logic
 */
@Injectable({
    providedIn: 'root'
})
export class <%= classify(name) %>FilterService {

    /** Array of active filters */
    activeFilters: FilterType[] = [];

    <% if (options.hasSearchBar) { %>
        searchString = new FormControl<string | null>('');
        <%= setStringColumns %>
    <% } %>

    <% if (options.isEnumQuickFilter) { %>
        <%= setEnumQuickFilter %>
    <% } %>

    <% if (options.isDateQuickFilter) { %>
        <%= setDataQuickFilter %>
    <% } %>


    constructor(
        <% if (options.isDateQuickFilter) { %>
            @Inject(MAT_DATE_FORMATS) private dateFormats: MatDateFormats,
            private dateAdapter: DateAdapter<any>,
        <% } %>
        <% if (options.isDateQuickFilter || options.hasSearchBar) { %>
            private translateService: TranslateService
        <% } %>
    ){}

    <% if (options.hasSearchBar) { %>
        searchStringInit(initialValue: string, regexValidator: string, minCharNo: number, maxCharNo: number) {
            this.searchString = new FormControl<string | null>(initialValue, [validateInputsValidator(regexValidator), validateInputLength(minCharNo, maxCharNo)]);
        }
    <% } %>


    /** Removes a specific filter. */
    removeFilter(filter:FilterType) {
        switch(filter.type) {
            <% if (options.hasSearchBar) { %>
                case FilterEnums.Search:
                    const removedFilter = this.activeFilters.findIndex(elem => elem.filterValue === filter.filterValue && elem.prop === filter.prop);
                    this.activeFilters.splice(removedFilter, 1);
                    this.searchString.setValue('');
                    break;
            <% } %>

            <% if (options.isEnumQuickFilter) { %>
                <%= setEnumRemoveFilter %>
            <% } %>

            <% if (options.isDateQuickFilter) { %>
                <%= setDataRemoveFilter %>
            <% } %>
        }
    }

    <% if (options.hasSearchBar) { %>
        /**
        * Get a value using a dot access path
        * @param accessPath access path e.g. object.attrL1.attrL2
        * @param object value behind the path or '' if not found/doesn't exist
        */
        getValueByAccessPath(accessPath: string, object: any) {
            try {
                return accessPath.split('.').reduce((a, b) => a[b], object);
            } catch (error) {

            return '';
            }
        }

        <% if (!options.enableRemoteDataHandling) { %>
            applyStringSearchFilter(data: Array<<%= classify(options.aspectModelTypeName) %>>): Array<<%= classify(options.aspectModelTypeName) %>> {
                if (this.searchString.value && this.searchString.value !== '' && !this.activeFilters.find(elem => elem.prop === this.selectedStringColumn.value && elem.filterValue === this.searchString.value)) {
                    const label = `in ${ this.selectedStringColumn.value === this.advancedSearchAllValue ?
                    this.translateService.instant('allTextFields') :
                        this.translateService.instant(`<%= options.translationPath %>` + this.selectedStringColumn.value + '.preferredName')}`;
                        this.activeFilters.push(<FilterType> {
                            removable: true,
                            type:FilterEnums.Search,
                            label,
                            prop: this.selectedStringColumn.value,
                            filterValue:this.searchString.value
                        });
                }

                const searchFilters = this.activeFilters.filter(elem => elem.type === FilterEnums.Search);

                return (searchFilters.length === 0) ? data : data.filter((item: any): boolean => {
                    let foundSearchStringInProperty = false;
                    searchFilters.forEach((filter: any): void => {
                        if (filter.prop === this.advancedSearchAllValue) {
                            this.stringColumns.forEach(elem => {
                                if (this.getValueByAccessPath(elem, item).toLocaleLowerCase().includes(filter.filterValue.toLocaleLowerCase())) {
                                    foundSearchStringInProperty = true;
                                }
                            });
                        } else {
                            if (this.getValueByAccessPath(filter.prop, <%= itemKey %>).toLocaleLowerCase().includes(filter.filterValue.toLocaleLowerCase())) {
                                foundSearchStringInProperty = true;
                            }
                        }
                    });

                    return foundSearchStringInProperty;
                });
            }
        <% } else { %>
            applyStringSearchFilter(query: AbstractLogicalNode): void {
                if (this.searchString.value && this.searchString.value !== '' && !this.activeFilters.find(elem => elem.prop === this.selectedStringColumn.value && elem.filterValue === this.searchString.value)) {
                    const label = ` in ${ this.selectedStringColumn.value === this.advancedSearchAllValue ?
                    this.translateService.instant('allTextFields') :
                        this.translateService.instant(`<%= options.translationPath %>` + this.selectedStringColumn.value + '.preferredName')}`;
                         this.activeFilters.push(<FilterType> {
                            removable: true,
                            type:FilterEnums.Search,
                            label,
                            prop: this.selectedStringColumn.value,
                            filterValue:this.searchString.value
                        });
                    }

                    <% if (getAllStringProps.length > 0) { %>
                        this.activeFilters.filter(af => af.type === FilterEnums.Search).forEach(af => {
                            if (af.prop !== null && af.filterValue !== undefined) {
                                query.addNode(new Or(this.addSelectedColumnsQuery(af.prop, af.filterValue)));
                            }
                        });
                    <% } %>
        <% } %>
    <% } %>

    <% if (options.enableRemoteDataHandling) { %>
        addSelectedColumnsQuery(selectedStringColumn: string, searchString: string): Like[] {
            if (selectedStringColumn !== this.advancedSearchAllValue) {
                return [new Like(selectedStringColumn, `*${searchString}*`)];
            } else {
                return this.stringColumns.map((column: string) => {
                    return new Like(column, `*${searchString}*`);
                });
           }
        }
    <% } %>

    <% if (options.isEnumQuickFilter) { %>
        <% if (options.enableRemoteDataHandling) { %>
            <%= getEnumFilterRemote %>
        <% } else { %>
            <%= getEnumFilterNotRemote %>
        <% } %>
    <% } %>

    <% if (options.isDateQuickFilter) { %>
        <% if (options.enableRemoteDataHandling) { %>
            <%= getDateRemote %>
        <% } else { %>
            <%= getDateNotRemote %>
        <% } %>

        private createDateAsUTC(date: Date) {
            return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds())).toISOString();
        }

        private getFormattedDate(theDate: string) {
            return this.dateFormats.display.dateInput !== 'L'
                ? this.dateAdapter.format(moment(theDate), this.dateFormats.display.dateInput)
                : new Date(theDate).toLocaleDateString( this.translateService.currentLang, {timeZone: 'UTC'});
        }
    <% } %>
}
