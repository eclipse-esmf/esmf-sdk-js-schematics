/** <%= getGenerationDisclaimerText %> **/
import {HttpClient} from '@angular/common/http';
import {Observable} from 'rxjs';
import {<%= classify(aspectModelType) %>} from '<%= getTypesPath %>';
import {Injectable} from '@angular/core';

export interface <%= classify(aspectModelName) %>Response {
    items: <%= classify(aspectModelType) %>[];
    totalItems?: number;
}

export interface Generic<%= classify(aspectModelName) %>Payload {
    [key: string]: string | number | boolean;
}

export type <%= classify(aspectModelName) %>Payload<T extends Generic<%= classify(aspectModelName) %>Payload = Generic<%= classify(aspectModelName) %>Payload> = T & {
    query: string
}

@Injectable({
    providedIn: 'root'
})
export class <%= classify(options.name) %>Service {

    constructor(protected http: HttpClient) {}

    <% if (options.enableRemoteDataHandling) { %>
        requestData(remoteAPI: string, body: <%= classify(aspectModelName) %>Payload): Observable<<%= classify(aspectModelName) %>Response> {
            const strippedUrlParts: string[] = remoteAPI.split('?');
            if (strippedUrlParts && strippedUrlParts.length === 2) {
        const queryParams = new URLSearchParams(strippedUrlParts[1]);
        queryParams.forEach((value, key) => {
            body[key] = value;
        });
            }
            return this.http.post<<%= classify(aspectModelName) %>Response>(strippedUrlParts[0], body);
        }
    <% } %>

    <% if (options.addCommandBar) { %>
        downloadCsv(csvArray: any): void {
            if (!csvArray.length) {
                throw new Error('Empty file. Please try again with data.');
            }
            const a = document.createElement('a');
            const blob = new Blob([csvArray], {type: 'text/csv'});
            const url = window.URL.createObjectURL(blob);

            a.href = url;
            a.download = '<%= dasherize(name) %>.csv';
            a.click();
            window.URL.revokeObjectURL(url);
            a.remove();
        }

    flatten(csvArray: <%= classify(aspectModelType) %>[]): <%= classify(aspectModelType) %>[] {
        return csvArray.map((item: <%= classify(aspectModelType) %>): <%= classify(aspectModelType) %> => {
            return this.flattenObj(item);
        });
    }

        private flattenObj(obj: any): any {
            const result: any = {};

            for (let key in obj) {
              if (typeof obj[key].constructor.isEnumeration === 'function' && obj[key]?.constructor?.isEnumeration()) {
                const enumerationValues = obj[key].constructor.values().find((v: any) =>
                  Object.keys(v).every(k => v[k] === obj[key][k])
                )

                result[key] = Object.values(enumerationValues).join('-');
              } else if (typeof obj[key] === 'object' && !(obj[key] instanceof Date)) {
                    const childObj = this.flattenObj(obj[key]);

                    for (let childObjKey in childObj) {
                        result[`${key}.${childObjKey}`] = childObj[childObjKey];
                    }
                } else {
                    result[key] = obj[key];
                }
            }
            return result;
        }
    <% } %>
}
