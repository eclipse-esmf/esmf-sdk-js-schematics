/** <%= options.generationDisclaimerText %> **/

import {Component, EventEmitter, Input, Output} from '@angular/core';
import {AbstractControl, FormArray, FormBuilder, FormGroup, FormControl, Validators} from '@angular/forms';
import {SelectionModel} from "@angular/cdk/collections";
import {Clipboard} from '@angular/cdk/clipboard';
import {ThemePalette} from "@angular/material/core";

<% for(let property of options.listProps) { %>
    <% if (property.characteristic instanceof options.collection
           && (property.characteristic.elementCharacteristic?.dataType.isComplex || property.characteristic.dataType?.isComplex)
          ) { %>
        import {<%= resolveJsPropertyType(property) %>} from '<%= options.typePath %>';
    <% } %>
<% } %>

/**
 * Enumeration of all available columns in the table.
 */
export enum <%= classify(name) %>Column {
    CHECKBOX = 'checkboxes',
    <%= enumPropertyDefinitions %>
}

@Component({
    selector: '<%= dasherize(name) %>',
    templateUrl: './<%= dasherize(name) %>.component.html',
    styleUrls: ['./<%= dasherize(name) %>.component.scss']
})
export class <%= classify(name) %>Component {
    @Input() noDataMessage: string = 'No data in the table';
    @Input() isMultipleSelectionEnabled = false;
    @Input() headerTooltipsOff: boolean = false;
    @Input() highlightSelectedRow: boolean = true;
    @Input() selection = new SelectionModel<any>(this.isMultipleSelectionEnabled, []);
    @Input() color: ThemePalette = 'primary';

    @Output() rowSelectionEvent = new EventEmitter<any>();
    @Output() copyToClipboardEvent = new EventEmitter<any>();
    @Output() rowClickEvent = new EventEmitter<any>();
    @Output() rowDblClickEvent = new EventEmitter<any>();
    @Output() rowRightClickEvent = new EventEmitter<any>();
    @Output() addRowClickEvent = new EventEmitter<any>();
    @Output() editRowClickEvent = new EventEmitter<any>();
    @Output() deleteRowClickEvent = new EventEmitter<any>();

    form: FormGroup;
    editForm: Array<any> | any;

    <% for(let property of options.listProps) { %>
        <% if (property.characteristic instanceof options.collection) { %>
            displayedColumns: Array<string> = Object.values(<%= classify(name) %>Column);
            dataSource: MatTableDataSource<<%= resolveJsPropertyType(property) %>> = new MatTableDataSource<<%= resolveJsPropertyType(property) %>>();
        <% } %>
    <% } %>

    constructor(private fb: FormBuilder, private clipboard: Clipboard,) {
      <%   if(options.readOnlyForm){%>
         console.log('options.readOnlyForm');
       <% }%>

        this.form = this.createFormGroup();
    }

    private createFormGroup(): FormGroup {

        return this.fb.group({
            <% for(let fieldConfig of options.fieldsConfigs) { %>
                <%= options.include(fieldConfig.tsTemplatePath, { fieldConfig: fieldConfig, include: options.include }) %>
            <% } %>
        });
    }

    getFormControl(property: string, dataTypeProperty?: string): AbstractControl | null | undefined {
        if (dataTypeProperty) {
            return this.form.get(property)?.get(dataTypeProperty);
        }

        return this.form.get(property);
    }


    checkboxClicked(row: any, prop: Array<string> | string): void {
        if (!this.isMultipleSelectionEnabled) {
          this.selection.clear();
        }

        this.selection.toggle(row);
        if( prop instanceof Array ) {
          this.editForm = prop.map(property => this.form.get(property));
        } else {
          this.editForm = this.form.get(prop);
        }
        this.rowSelectionEvent.emit(this.selection.selected);
    }

    copyToClipboard(value: any, event: MouseEvent): void {
        event.stopPropagation();
        event.preventDefault();
        this.clipboard.copy(value);
        this.copyToClipboardEvent.emit(value);
    }

    rowClicked(row: any, prop: Array<string> | string, $event: MouseEvent): boolean {
        if (this.highlightSelectedRow) {
            this.checkboxClicked(row, prop);
        }

        if ($event.type === 'contextmenu') {
            $event.preventDefault();
            const mousePositionOnClick = {x: $event.clientX + 'px', y: $event.clientY + 'px'};
            this.rowRightClickEvent.emit({data: row, mousePosition: mousePositionOnClick});
        }

        if ($event.type === 'click') {
            this.rowClickEvent.emit({data: row});
        }

        return false;
    }

    rowDblClicked(row: any, $event: MouseEvent): void {
        this.rowDblClickEvent.emit({data: row});
    }

    addRow() {
        this.addRowClickEvent.emit();
    }

    editRow() {
        if (this.selection.selected.length > 0) {
            this.editRowClickEvent.emit(this.findSelectedRowFormGroup());
        }
    }

    deleteRow() {
        if (this.selection.selected.length > 0) {
            this.deleteRowClickEvent.emit(this.findSelectedRowFormGroup());
        }
    }

    private findSelectedRowFormGroup(): FormGroup | null {
        const selectedValue = this.selection.selected[0];
        const rowsArray = (this.editForm as FormGroup).get('rows') as FormArray;

        for (let i = 0; i < rowsArray.length; i++) {
          const rowGroup = rowsArray.at(i) as FormGroup;
          if (JSON.stringify(rowGroup.value) === JSON.stringify(selectedValue)) {
            return rowGroup;
          }
        }

        return null;
    }

    onCancel() {
        console.log('Cancel form');
    }

    onSubmit() {
        if (this.form.valid) {
        console.log('Form Value:', this.form.value);
        }
    }
}
