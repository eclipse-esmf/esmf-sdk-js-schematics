/** <%= options.generationDisclaimerText %> **/

import {Attribute, Component, forwardRef, OnInit} from '@angular/core';
import {CommonModule} from '@angular/common';
import {
    FormBuilder,
    FormControl,
    FormGroup,
    FormsModule,
    NG_VALIDATORS,
    NG_VALUE_ACCESSOR,
    ReactiveFormsModule,
} from '@angular/forms';
import {FormGroupReusable} from '../../../../utils/form-group-reusable';
<% for (let childConfig of options.fieldConfig.children) {
    %>import {<%= classify(childConfig.name) %>Component} from '../<%= classify(childConfig.name) %>/<%= dasherize(childConfig.name) %>.component';
<% } %>

export interface <%= classify(options.fieldConfig.name) %>FormGroup {
    <% for (let childConfig of options.fieldConfig.children) {
        %><%= classify(childConfig.name) %>: FormControl<string | null>;
    <% } %>
}

@Component({
    selector: '<%= dasherize(options.fieldConfig.name) %>',
    standalone: true,
    imports: [
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        <% for (let childConfig of options.fieldConfig.children) {
            %><%= classify(childConfig.name) %>Component,
        <% } %>
    ],
    templateUrl: './<%= dasherize(options.fieldConfig.name) %>.component.html',
    styleUrls: ['./<%= dasherize(options.fieldConfig.name) %>.component.scss'],
    providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => <%= classify(options.fieldConfig.name) %>Component),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => <%= classify(options.fieldConfig.name) %>Component),
            multi: true,
        },
    ],
})
export class <%= classify(options.fieldConfig.name) %>Component extends FormGroupReusable implements OnInit {
    form!: FormGroup<<%= classify(options.fieldConfig.name) %>FormGroup>;

    ngOnInit(): void {
        this.form = this.fb.nonNullable.group<<%= classify(options.fieldConfig.name) %>FormGroup>({
            <% for (let childConfig of options.fieldConfig.children) {
                %><%= childConfig.name %>: new FormControl(null),
            <% } %>
        });
    }

    constructor(@Attribute('formControlName') public formControlName: string, private fb: FormBuilder) {
        super();
    }
}
