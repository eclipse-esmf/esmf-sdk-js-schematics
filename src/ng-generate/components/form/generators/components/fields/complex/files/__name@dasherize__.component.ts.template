/** <%= options.generationDisclaimerText %> **/

import {Attribute, Component, forwardRef} from '@angular/core';
import {CommonModule} from '@angular/common';
import {
    FormControl,
    FormGroup,
    FormsModule,
    NG_VALIDATORS,
    NG_VALUE_ACCESSOR,
    ReactiveFormsModule,
} from '@angular/forms';
import {FormGroupReusable} from '<% if (options.enableVersionSupport) { %>../<% } %>../../../utils/form-group-reusable';
<% for (let childConfig of options.fieldConfig.children) {
    %>import {<%= classify(childConfig.name) %>Component, <%= childConfig.name %>FormControl} from '../<%= childConfig.nameDasherized %>/<%= childConfig.nameDasherized %>.component';
<% } %>

export interface <%= options.fieldConfig.name %> {
    <% for (let childConfig of options.fieldConfig.children) {
        %><%= childConfig.name %>: FormControl<any | null>;
    <% } %>
}

export const <%= options.fieldConfig.name %>FormControl = new FormControl<<%= options.fieldConfig.name %> | null>(null);
export const <%= options.fieldConfig.name %>FormGroup = new FormGroup<<%= options.fieldConfig.name %>>({
    <% for (let childConfig of options.fieldConfig.children) {
        %><%= childConfig.name %>: <%= childConfig.name %>FormControl,
    <% } %>
});

@Component({
    selector: '<%= options.fieldConfig.selector %>',
    standalone: true,
    imports: [
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        <% for (let childConfig of options.fieldConfig.children) {
            %><%= classify(childConfig.name) %>Component,
        <% } %>
    ],
    templateUrl: './<%= dasherize(options.fieldConfig.name) %>.component.html',
    styleUrls: ['./<%= dasherize(options.fieldConfig.name) %>.component.scss'],
    providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => <%= classify(options.fieldConfig.name) %>Component),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => <%= classify(options.fieldConfig.name) %>Component),
            multi: true,
        },
    ],
})
export class <%= classify(options.fieldConfig.name) %>Component extends FormGroupReusable {
    formGroup: FormGroup<<%= options.fieldConfig.name %>> = <%= options.fieldConfig.name %>FormGroup;

    constructor(@Attribute('formControlName') public formControlName: string) {
        super();
    }
}
