/** <%= options.generationDisclaimerText %> **/

import {Attribute, Component, forwardRef, OnInit} from '@angular/core';
import {CommonModule} from '@angular/common';
import {FormControl, FormArray, FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR, ReactiveFormsModule} from '@angular/forms';
import {FormArrayReusable} from '<% if (options.enableVersionSupport) { %>../<% } %>../../../utils/form-array-reusable';
import {MatTableDataSource, MatTableModule} from "@angular/material/table";
import {MatCheckboxChange, MatCheckboxModule} from "@angular/material/checkbox";
import {MatButtonModule} from "@angular/material/button";
import {Subject} from "rxjs";
import {takeUntil} from "rxjs/operators";

export type <%= classify(options.fieldConfig.name) %>Item = any;
export type <%= classify(options.fieldConfig.name) %>FormControl = FormArray<FormControl<<%= classify(options.fieldConfig.name) %>Item>>;
export const <%= options.fieldConfig.name %>FormControl: <%= classify(options.fieldConfig.name) %>FormControl = new FormArray<FormControl<<%= classify(options.fieldConfig.name) %>Item>>([]);

const <%= options.fieldConfig.name %>EventsSubjects = {
  add: new Subject<void>(),
  edit: new Subject<DataSourceSelection>(),
  delete: new Subject<DataSourceSelection>(),
}

export const <%= options.fieldConfig.name %>Events = {
  add$: <%= options.fieldConfig.name %>EventsSubjects.add.asObservable(),
  edit$: <%= options.fieldConfig.name %>EventsSubjects.edit.asObservable(),
  delete$: <%= options.fieldConfig.name %>EventsSubjects.delete.asObservable(),
}

interface DataSourceItem {
  item: <%= classify(options.fieldConfig.name) %>Item;
  isSelected: boolean;
}

export interface DataSourceSelectionItem {
  item: <%= classify(options.fieldConfig.name) %>Item;
  controlIndex: number;
}
export type DataSourceSelection = DataSourceSelectionItem[];

@Component({
    selector: '<%= options.fieldConfig.selector %>',
    standalone: true,
    imports: [
        CommonModule,
        FormsModule,
        ReactiveFormsModule,
        MatTableModule,
        MatCheckboxModule,
        MatButtonModule
    ],
    templateUrl: './<%= dasherize(options.fieldConfig.name) %>.component.html',
    styleUrls: ['./<%= dasherize(options.fieldConfig.name) %>.component.scss'],
    providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => <%= classify(options.fieldConfig.name) %>Component),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef(() => <%= classify(options.fieldConfig.name) %>Component),
            multi: true,
        },
    ],
})
export class <%= classify(options.fieldConfig.name) %>Component extends FormArrayReusable implements OnInit {
    formArray: <%= classify(options.fieldConfig.name) %>FormControl = <%= options.fieldConfig.name %>FormControl;
    dataSource: MatTableDataSource<DataSourceItem> = new MatTableDataSource<DataSourceItem>([]);
    selection: DataSourceSelection = [];
    isAllChecked: boolean = false;
    columns: string[] = [
        'isSelected',
        <% if (options.fieldConfig.isScalarChild) { %>
            'value'
        <% } else { %>
            <% for (let childConfig of options.fieldConfig.children) {
                %>'<%= childConfig.name %>',
            <% } %>
        <% } %>
    ];

    constructor(@Attribute('formArrayName') public formArrayName: string) {
        super();
    }

    get isSelection(): boolean {
        return !!this.selection.length;
    }

    ngOnInit(): void {
        this.setData(<%= options.fieldConfig.name %>FormControl.value);
        <%= options.fieldConfig.name %>FormControl.valueChanges
            .pipe(takeUntil(this.destroyed$))
            .subscribe((values: <%= classify(options.fieldConfig.name) %>Item[]) => this.setData(values));
    }

    onAdd(): void {
        <%= options.fieldConfig.name %>EventsSubjects.add.next();
    }

    onEdit(dataSourceSelection: DataSourceSelection): void {
        <%= options.fieldConfig.name %>EventsSubjects.edit.next(dataSourceSelection);
    }

    onDelete(dataSourceSelection: DataSourceSelection): void {
        <%= options.fieldConfig.name %>EventsSubjects.delete.next([...dataSourceSelection].reverse());
    }

    selectAllRows(value: MatCheckboxChange): void {
        this.dataSource.data.forEach(item => item.isSelected = value.checked);
        this.selection = this.getSelection(this.dataSource.data);
    }

    selectRow(dataSourceItem: DataSourceItem, event: MatCheckboxChange): void {
        dataSourceItem.isSelected = event.checked;
        this.selection = this.getSelection(this.dataSource.data);
    }

    private setData(values: <%= classify(options.fieldConfig.name) %>Item[]): void {
        this.isAllChecked = false;
        this.dataSource.data = this.createDataSourceItems(values);
        this.selection = this.getSelection(values);
    }

    private createDataSourceItems(values: <%= classify(options.fieldConfig.name) %>Item[], isSelected: boolean = false): DataSourceItem[] {
        return values.map(item => ({
            item,
            isSelected
        }));
    }

    private getSelection(dataSourceItems: DataSourceItem[]): DataSourceSelection {
        return dataSourceItems.reduce((acc: DataSourceSelection, dataSourceItem: DataSourceItem, index: number) => {
            if (dataSourceItem.isSelected) {
                acc.push({
                    item: dataSourceItem.item,
                    controlIndex: index
                });
            }

            return acc;
        }, []);
    }
}
