/** <%= options.generationDisclaimerText %> **/

import {Attribute, Component, forwardRef, Input} from '@angular/core';
import {CommonModule} from '@angular/common';
import {FormControl, FormsModule, NG_VALUE_ACCESSOR, ReactiveFormsModule, Validators} from '@angular/forms';
import {MatDatepickerModule} from '@angular/material/datepicker';
import {MatFormFieldModule} from '@angular/material/form-field';
import {MatInputModule} from '@angular/material/input';
import {FormControlReusable} from "<% if (options.enableVersionSupport) { %>../<% } %>../../../utils/form-control-reusable";
import {ThemePalette, MAT_DATE_LOCALE} from '@angular/material/core';
import {
    NgxMatMomentAdapter,
    NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS,
    NGX_MAT_MOMENT_FORMATS,
    NgxMatMomentModule,
} from '@angular-material-components/moment-adapter';
import {isMoment} from 'moment';
import {NGX_MAT_DATE_FORMATS, NgxMatDateAdapter, NgxMatDatetimePickerModule} from '@angular-material-components/datetime-picker';

export const <%= options.fieldConfig.name %>FormControl = new FormControl(
    null,
    [
        <% for(let validator of options.fieldConfig.validators) { %>
            <%= validator.definition %>
        <% } %>
    ]
);

@Component({
    selector: '<%= options.fieldConfig.selector %>',
    standalone: true,
    imports: [
        CommonModule,
        FormsModule,
        MatDatepickerModule,
        MatFormFieldModule,
        MatInputModule,
        ReactiveFormsModule,
        NgxMatDatetimePickerModule,
        NgxMatMomentModule,
    ],
    templateUrl: './<%= dasherize(options.fieldConfig.name) %>.component.html',
    styleUrls: ['./<%= dasherize(options.fieldConfig.name) %>.component.scss'],
    providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => <%= classify(options.fieldConfig.name) %>Component),
            multi: true,
        },
        {
            provide: NgxMatDateAdapter,
            useClass: NgxMatMomentAdapter,
            deps: [MAT_DATE_LOCALE, NGX_MAT_MOMENT_DATE_ADAPTER_OPTIONS],
        },
        {provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_MOMENT_FORMATS},
        {provide: MAT_DATE_LOCALE, useValue: 'en-GB'},
    ],
})
export class <%= classify(options.fieldConfig.name) %>Component extends FormControlReusable {
    @Input() color: ThemePalette;

    formControl = <%= options.fieldConfig.name %>FormControl;

    constructor(@Attribute('formControlName') public formControlName: string) {
        super();
    }

    get errorMessage() {
        return this.formControl.hasError('required')
            ? 'The field is required'
            : 'The value is invalid or empty';
    }

    override set value(val: any) {
        this.val = isMoment(val) ? val.format('YYYY-MM-DDTHH:mm:ss') : val;
        this.onChange(this.val);
        this.onTouch(this.val);
    }
}
