/** <%= options.generationDisclaimerText %> **/
import {Component, EventEmitter, Input, Output, ViewChild, AfterViewInit, ElementRef, HostListener, QueryList, ViewChildren, TemplateRef} from '@angular/core';
import {SelectionModel} from "@angular/cdk/collections";
import { MatDialog } from '@angular/material/dialog';

<% if (options.hasFilters || (options.componentType === 'card' && options.addCommandBar)) { %>
    import {<%= classify(name) %>FilterService
        <% if (options.componentType === 'card') { %>
            , SortCard
        <% } %>
    } from './<%= dasherize(name) %>-filter.service';
<% } %>

<% if (options.componentType === 'card') { %>
    import {<%= classify(name) %>CardValues} from './<%= dasherize(name) %>.component';
<% } %>

<% if (options.componentType === 'table' && options.hasSearchBar) { %>
    import {Config} from "./<%= dasherize(name) %>.component";
    import {<%= classify(name) %>ConfigMenuComponent} from './<%= dasherize(name) %>-config-menu.component';
<% } %>

@Component({
    selector: '<%= dasherize(name) %>-command-bar',
    templateUrl: './<%= dasherize(name) %>-command-bar.component.html',
    styleUrls: ['./<%= dasherize(name) %>-command-bar.component.scss']
})
export class <%= classify(name) %>CommandBarComponent implements AfterViewInit {
    @Input() isMultipleSelectionEnabled = true;
    @Input() selection = new SelectionModel<any>(this.isMultipleSelectionEnabled, []);
    @Input() totalItems = 0;
    @Input() searchFocused = false;
    @Input() allowedCharacters: string = '';
    @Input() minNumberCharacters: number = 2;
    @Input() maxNumberCharacters: number = 50;
    @Input() searchHint?: string;
    @Input() <%= options.localStorageKeyConfig %>: string = '';

    <% if (options.componentType === 'table' && options.hasSearchBar) { %>
        @Input() configs: Array<Config> = [];
        @Input() hasAdvancedSearch: boolean = this.filterService.stringColumns.length > 1;
    <% } %>

    @Output() applyFilters = new EventEmitter<void>();
    @Output() reloadFilter = new EventEmitter<void>();
    @Output() exportToCsv = new EventEmitter<void>();

    <% if (options.customCommandBarActions.length > 0) { %>
        @Output() customCommandBarActionEvent = new EventEmitter<any>();
    <% } %>

    <% if (options.componentType === 'table' && options.hasSearchBar) { %>
        @Output() setConfiguration = new EventEmitter<Array<Config>>();
        @ViewChild(<%= classify(name) %>ConfigMenuComponent) private configurationComponent!: <%= classify(name) %>ConfigMenuComponent;
    <% } %>

    <% if (options.componentType === 'card') { %>
        @Output() sorting = new EventEmitter<void>();

        <%= camelize(name) %>CardValues = Object.values(<%= classify(name) %>CardValues);
        protected readonly SortCard = SortCard;
    <% } %>

    @ViewChild('componentsContainer', { read: ElementRef, static: false })
    componentsContainer!: ElementRef;
    @ViewChildren('toolbarComp', { read: ElementRef })
    components!: QueryList<ElementRef>;
    hiddenComponents: any[] = [];
    initialCompWidths : any[]= [];

    constructor(<% if (options.hasFilters || (options.componentType === 'card' && options.addCommandBar)) { %>public filterService: <%= classify(name) %>FilterService<% } %>, public dialog: MatDialog) {
        <% if (options.componentType === 'card') { %>
            this.filterService.sortedProperty = this.<%= camelize(name) %>CardValues[0];
        <% } %>
    }

    <% for(let property of propValues) { %>
      <% if ((options.isEnumQuickFilter && property.isEnum) || (options.isDateQuickFilter && property.isDate) ) { %>
              @ViewChild('<%=property.propertyName %>', { static: true }) private <%=property.propertyName %>!: TemplateRef<any>;  
              openInDialog<%=property.propertyName %>(){
              this.dialog.open(this.<%=property.propertyName %>);
        }
      <% } %>
     <% } %>

    triggerApplyFilters(): void {
      this.applyFilters.emit();
    }

    triggerExportToCsv(): void {
      this.exportToCsv.emit();
    }

    triggerReloadFilter(): void {
      this.reloadFilter.emit();
    }

    <% if (options.componentType === 'card') { %>
        setSortingProperty(value: string) {
            this.filterService.sortedProperty = value;
            this.sorting.emit();
        }

        setSortingDir() {
            this.filterService.sortCard = this.filterService.sortCard === SortCard.ASCENDING ? SortCard.DESCENDING : SortCard.ASCENDING;
            this.sorting.emit();
        }
    <% } %>

    <% if (options.componentType === 'table' && options.hasSearchBar) { %>
        triggerInitOpenedConfigurationDialog(): void {
            this.configurationComponent.keyLocalStorage = this.<%= options.localStorageKeyConfig %>;
            this.configurationComponent.configs.splice(0, this.configurationComponent.configs.length);
            this.configurationComponent.configs.push(...this.configs.map(config => ({...config})));
        }

        triggerSetConfiguration(config: Array<Config>): void {
          this.setConfiguration.emit(config);
        }
    <% } %>

    <% if (options.customCommandBarActions.length > 0) { %>
        executeCustomCommandBarAction(action: string) {
            this.customCommandBarActionEvent.emit({action: action})
        }
    <% } %>

    ngAfterViewInit(): void {
      const compWidths: any[] = this.components
      .toArray()
      .map((comp) => 
        ( {width: comp.nativeElement.clientWidth, id: comp.nativeElement.getAttribute('data-resp') }));

      if(this.initialCompWidths.length === 0){
        this.initialCompWidths = compWidths;
      };

      this.updateToolbarComponentsVisibility();
    }

    @HostListener('window:resize', ['$event'])
    onResize() {
       this.updateToolbarComponentsVisibility();
    }

  updateToolbarComponentsVisibility() {
      this.hiddenComponents = [];
      const containerWidth = this.componentsContainer.nativeElement.clientWidth;
      let usedWidth = 0;

       for (let i = 0; i < this.initialCompWidths.length; i++) {
          const buttonWidth = this.initialCompWidths[i];
          // 70 is for the width of the collapsed menu width
          if (usedWidth + buttonWidth.width + 70 >= containerWidth) {
            this.hiddenComponents.push(buttonWidth.id);
          } else {
            usedWidth += buttonWidth.width;
          }
        }
    }

    isInCollapsedMenu(id: string) {
      return this.hiddenComponents.includes(id);
    }

    formatJsonTooltipContent(jsonData){
      return JSON.stringify(data, null, 2);
    }

    <% if (options.componentType === 'table' && options.hasSearchBar) { %>
      openSettingsFromCollapsed() {      
        const configMenuDialogRef =  this.dialog.open(<%= classify(name) %>ConfigMenuComponent,{
              data: { configs: this.configs, keyLocalStorage: this.<%= options.localStorageKeyConfig %>},
            }
        );
        configMenuDialogRef.afterClosed().subscribe((result) =>{ if(result){
          this.triggerSetConfiguration(result)}
        });
      }
    <% } %>
}
