<!--
 * Copyright (c) 2023 Robert Bosch Manufacturing Solutions GmbH
 *
 * See the AUTHORS file(s) distributed with this work for
 * additional information regarding authorship.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * SPDX-License-Identifier: MPL-2.0
 -->

<div class="js-sdk-component-container">
  <% if (options.addCommandBar) { %>
    <command-bar
        [isMultipleSelectionEnabled]="isMultipleSelectionEnabled"
        [selection]="selection"
        [totalItems]="totalItems"
        [searchFocused]="searchFocused"
        [allowedCharacters]="allowedCharacters"
        [minNumberCharacters]="minNumberCharacters"
        [maxNumberCharacters]="maxNumberCharacters"
        [searchHint]="searchHint"
        <% if (options.hasSearchBar) { %>
            [configs]="configs"
            [<%= options.localStorageKeyConfig %>]="<%= options.localStorageKeyConfig %>"
            (setConfiguration)="setConfiguration($event)"
        <% } %>
        (applyFilters)="applyFilters()"
        (reloadFilter)="reloadFilter()"
        (exportToCsv)="exportToCsv()"
        <% if (options.customRowActions.length > 0) { %>
            (executeCustomCommandBarAction)="customCommandBarActionEvent()"
        <% } %>
    ></command-bar>
  <% } %>
  <ng-container *ngIf="!!customTemplate && !dataSource.data.length">
    <ng-container *ngTemplateOutlet="loadCustomTemplate()"></ng-container>
  </ng-container>
  <% if (options.hasFilters) { %>
    <chip-list (removeFilter)="removeFilter($event)"></chip-list>
  <% } %>
  <div [hidden]="!!customTemplate && !dataSource.data.length">
    <div data-test="table-container" class="mat-table-container">
      <table data-test="table" mat-table class="full-width-table" matSortDisableClear="true" matSort (matSortChange)="sortData()"
             [matSortActive]="columnToSort.sortColumnName" [matSortDirection]="columnToSort.sortDirection" [ngClass]="customTableClass"
             [dataSource]="dataSource" aria-label="Elements" [matSortDisabled]="dragging">

        <!-- Row shown when there is no matching data that will be provided to the wrapper table. -->
        <tr data-test="no-data-table-row" class="mat-row" *matNoDataRow>
          <td data-test="no-data-table-cell" class="mat-cell" [colSpan]="displayedColumns.length" *ngIf="!dataSource.data.length">
            <span data-test="no-data-message">{{noDataMessage || 'No data'}}</span>
          </td>
        </tr>

        <% if (options.addRowCheckboxes) { %>
            <ng-container matColumnDef="checkboxes" data-test="checkboxes-container">
                <th mat-header-cell *matHeaderCellDef data-test="table-header-checkbox">
                    <mat-checkbox data-test="header-checkbox" (change)="$event ? toggleSelectAll() : null" [checked]="selection.hasValue() && isAllSelected()" [indeterminate]="selection.hasValue() && !isAllSelected()"></mat-checkbox>
                </th>
                <td mat-cell *matCellDef="let row" data-test="table-cell-checkbox">
                    <mat-checkbox data-test="cell-checkbox" (click)="$event.stopPropagation()" (mousedown)="$event.preventDefault()" (change)="$event ? checkboxClicked(row) : null" [checked]="selection.isSelected(row)"></mat-checkbox>
                </td>
            </ng-container>
        <% } %>

        <% for(let value of tableColumValues) { %>
            <%
                let language = options.templateHelper.isMultiStringProperty(value.property) ? '[currentLanguage]' : '';
                let propertyName = options.templateHelper.isEnumPropertyWithEntityValues(value.property)
                    ? value.property.name + '?.' + options.templateHelper.getEnumEntityInstancePayloadKey(value.property)
                    : value.property.name;
                let cellPropertyPath = `${options.jsonAccessPath}${value.complexPrefix}${propertyName}`;
                let isEmptyValue = `row.${cellPropertyPath} === null || row.${cellPropertyPath} === undefined`;
                let propertyLocaleKeyPath = `${options.templateHelper.getVersionedAccessPrefix(options)}${options.isAspectSelected ? options.jsonAccessPath : ''}${value.complexPrefix}${value.property.name}`;
                let datePipe = options.templateHelper.isDateTimeProperty(value.property) ? `| date: ${resolveDateTimeFormat(value.property)}` : '';
                let descriptionPipe = options.templateHelper.isEnumPropertyWithEntityValues(value.property) ? ` | showDescription:get${classify(value.property.name)}Value` : '';
                let cellContent = `!(${isEmptyValue}) ? (row.${cellPropertyPath}${descriptionPipe}${language}${datePipe})  : '-'`;
            %>
            <!-- <%= cellPropertyPath %> Column -->
            <ng-container data-test="table-column" matColumnDef="<%= cellPropertyPath %>">
                <th data-test="table-header" mat-header-cell *matHeaderCellDef
                    mat-sort-header="<%= cellPropertyPath %>"
                    <%= options.templateHelper.isNumberProperty(value.property) ? `class="table-header-number"` : '' %>
                    <% if (tableColumValues.length - 1 > value.index) { %>
                        [resizeColumn]="true" [index]="<%= value.index %>" (dragging)='dragging = $event'
                    <% } %>
                >
                    <span [matTooltip]=" '<%= propertyLocaleKeyPath %>.description' | translate"
                          [matTooltipDisabled]="headerTooltipsOff"
                          matTooltipPosition="above"
                          data-test="table-header-text">
                        {{ '<%= propertyLocaleKeyPath %>.preferredName' | translate }}
                    </span>
                </th>

                <td data-test="table-cell"
                    <% if(options.templateHelper.isEnumPropertyWithEntityValues(value.property)) { %>
                        [matTooltip]="!('<%= isEmptyValue %>') ? (row.<%= cellPropertyPath %><%= descriptionPipe %>:true<%= language %>) : ''" [matTooltipDisabled]="'<%= isEmptyValue %>'"
                    <% } %>
                        mat-cell *matCellDef="let row"
                    <% if(options.templateHelper.isNumberProperty(value.property)) { %>
                        class="table-cell-number"
                    <% } %>
                >

                <% if(options.hasSearchBar) { %>
                    <ng-container
                        [ngTemplateOutlet]="highlightCell"
                        [ngTemplateOutletContext]="{ value: <%= cellContent %> }"></ng-container>
                <% } else { %>
                    {{<%= cellContent %>}}
                <% } %>

                <mat-icon data-test="copy-to-clipboard-icon" *ngIf="!(<%= isEmptyValue %>)" class="material-icons copy-to-clipboard"
                    (click)="copyToClipboard(row.<%= cellPropertyPath %><%= language %>, $event)">
                        content_copy
                 </mat-icon>
                </td>
            </ng-container>
        <% } %>

        <% if(options.customColumns && options.customColumns.length > 0) { %>
            <% for(let columnName of options.customColumns) { %>
                <!-- <%= columnName %> Column -->
                <ng-container data-test="custom-column-container" matColumnDef="<%= columnName %>">
                    <% if(options.enableVersionSupport) { %>
                        <th data-test="custom-column-header" mat-header-cell *matHeaderCellDef mat-sort-header>
                            {{ '<%= options.selectedModelTypeName.toLowerCase() %>.v<%= options.formatedAspectModelVersion %>.customColumn.<%= columnName %>' | translate }}
                        </th>
                    <% } else { %>
                        <th data-test="custom-column-header" mat-header-cell *matHeaderCellDef mat-sort-header>
                            {{ '<%= options.selectedModelTypeName.toLowerCase() %>.customColumn.<%= columnName %>' | translate }}
                        </th>
                    <% } %>
                    <td data-test="custom-column-cell" mat-cell *matCellDef="let row">
                        <ng-container data-test="custom-column-container" *ngTemplateOutlet="<%= camelize(columnName) %>Template; context:{aspect:row}"></ng-container>
                    </td>
                </ng-container>
            <% } %>
        <% } %>

        <%= customRowActions %>

        <ng-container data-test="columns-menu-button-header" matColumnDef="columnsMenu" stickyEnd>
          <th style="text-align: right;justify-content: flex-end;" data-test="columns-menu-button-header" mat-header-cell *matHeaderCellDef>
            <button data-test="mat-table-menu-button"
                    mat-icon-button
                    [matMenuTriggerFor]="columnMenu"
                    (menuOpened)="initOpenedColumnMenuDialog()"
                    aria-label="Menu for the table"
                    class="mat-table-menu-button">
              <mat-icon data-test="mat-table-menu-icon" [matTooltip]="'tableActions.openColumnsMenu' | translate" class="material-icons">settings</mat-icon>
            </button>
          </th>
          <td data-test="columns-menu-button-cell" mat-cell *matCellDef="let row" [class.bg-transparent]="!setStickRowActions"></td>
        </ng-container>

        <tr data-test="table-header-row" mat-header-row *matHeaderRowDef="displayedColumns; sticky: true"></tr>
        <tr data-test="table-row" mat-row *matRowDef="let row; columns: displayedColumns;" [class.selected-row]="selection.isSelected(row) && highlightSelectedRow" (click)="rowClicked(row, $event)" (contextmenu)="rowClicked(row, $event)" (dblclick)="rowDblClicked(row, $event)"></tr>
      </table>

      <mat-menu data-test="column-menu" #columnMenu="matMenu" class="column-menu">
        <<%= dasherize(name) %>-column-menu (columnsChangedEvent)="setDisplayedColumns($event)"></<%= dasherize(name) %>-column-menu>
      </mat-menu>

      <% if (options.hasSearchBar) { %>
          <mat-menu data-test="column-menu" class="column-menu">
            <<%= dasherize(name) %>-config-menu (configChangedEvent)="setConfiguration($event)"></<%= dasherize(name) %>-config-menu>
          </mat-menu>
      <% } %>

    </div>
    <mat-paginator data-test="paginator"
                   [length]="<%= remoteDataHandling %>"
                   [pageIndex]="0"
                   [pageSize]="pageSize"
                   [pageSizeOptions]="pageSizeOptions"
                   [showFirstLastButtons]="showFirstLastButtons"
                   (page)="pageChange()">
    </mat-paginator>
  </div>
</div>

<% if (options.hasSearchBar) { %>
    <!-- Highlighting search values -->
    <ng-template #highlightCell let-value="value">
        <span [highlight]="highlightString" [highlightSource]="value" [highlightColor]="highlightConfig?.color">
            {{ value === null ? '-' : value }}
        </span>
    </ng-template>
<% } %>
