/** <%= options.generationDisclaimerText %> **/
import {Component, EventEmitter, Inject, Input, Optional, Output} from '@angular/core';
import {JSSdkLocalStorageService} from "<% if (options.enableVersionSupport) { %>../<% } %>../../services/storage.service";
import {Config} from './<%= dasherize(name) %>.component';
import {MAT_DIALOG_DATA} from '@angular/material/dialog';

@Component({
    selector: '<%= dasherize(name) %>-config-menu',
    templateUrl: './<%= dasherize(name) %>-config-menu.component.html',
    styleUrls: ['./<%= dasherize(name) %>.component.scss'],
})
export class <%= classify(name) %>ConfigMenuComponent {
    @Output() configChangedEvent = new EventEmitter<Array<Config>>();
    @Input() isOpenedFromMatMenu = false;

    keyLocalStorage: string = '';
    closeConfigMenu: boolean = false;
    configs: Array<Config> = [];
    configsDefault: Array<Config> = [];

    constructor(private storageService: JSSdkLocalStorageService, @Optional() @Inject(MAT_DIALOG_DATA) public data: {configs: Array<Config>, keyLocalStorage:string}) {
            if (!data) {
                this.configsDefault = JSON.parse(JSON.stringify(this.configs));
            }
            else{
                this.configs = data.configs;
                this.configsDefault = JSON.parse(JSON.stringify(data.configs));
                this.keyLocalStorage = data.keyLocalStorage;
            }
    }

    closeMenu(): void {
        this.configs = JSON.parse(JSON.stringify(this.configsDefault));
        this.closeConfigMenu = true;
    }

    stopMenuClosing(event: MouseEvent): void {
      if(this.isOpenedFromMatMenu){
        if (this.closeConfigMenu) {
            return;
        }
        event.stopPropagation();
    } }

    configClick(event: MouseEvent, config: Config): void {
        config.selected = !config.selected;
        event.preventDefault();
        event.stopPropagation();
    }

    colorChange(event: Event, config: Config) {
        config.color = (event.target as HTMLInputElement).value;
        event.preventDefault();
        event.stopPropagation();
    }

    /**
    * Store columns locally and update displayed columns afterwards
    */
    storeConfig(): void {
        this.closeConfigMenu = true;
        this.storageService.setItem(this.keyLocalStorage, this.configs);
        this.configChangedEvent.emit(this.configs);
    }
}
